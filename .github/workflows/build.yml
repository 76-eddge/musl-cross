name: Build

on:
  push:
    branches: ['**']
    tags-ignore: ['**']
  release:
    types: [published]

jobs:
  init:
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - uses: ./.github/actions/get-sources

    - id: set-matrix
      run: |
        if [ "$GITHUB_EVENT_NAME" = "release" ] || [ "$GITHUB_REF_NAME" = "main" ]; then
          echo 'matrix={"arch":[{"target":"x86_64-linux-musl"},{"target":"x86_64-linux-muslx32"},{"target":"i686-linux-musl"},{"target":"powerpc64le-linux-musl","config":"--with-abi=elfv2 --enable-secureplt --enable-decimal-float=no --enable-targets=powerpcle-linux"},{"target":"arm-linux-musleabihf"},{"target":"aarch64-linux-musl","config":"--with-arch=armv8-a --with-abi=lp64"},{"target":"powerpc-linux-musl","config":"--enable-secureplt --enable-decimal-float=no"}]}' > $GITHUB_OUTPUT
        else
          echo 'matrix={"arch":[{"target":"x86_64-linux-musl"},{"target":"i686-linux-musl"}]}' > $GITHUB_OUTPUT
        fi

  build:
    needs: init
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.init.outputs.matrix) }}

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - uses: ./.github/actions/get-sources

    - uses: docker/setup-buildx-action@v2
      with:
        driver-opts: env.BUILDKIT_STEP_LOG_MAX_SIZE=-1

    - name: Build Toolchain
      uses: docker/build-push-action@v4
      with:
        build-args: |
          TARGET=${{ matrix.arch.target }}
          GCC_CONFIG=${{ matrix.arch.config }}
        cache-from: type=gha,scope=${{ matrix.arch.target }}
        cache-to: type=gha,ignore-error=true,mode=max,scope=${{ matrix.arch.target }}
        no-cache-filters: deploy
        context: .
        outputs: type=tar,dest=${{ matrix.arch.target }}.tar
        target: deploy

    - name: Test Toolchain - Compile
      run: |
        ls -l ${{ matrix.arch.target }}.tar
        tar tvf ${{ matrix.arch.target }}.tar
        tar xf ${{ matrix.arch.target }}.tar
        make SRC_DIR=test BIN_DIR=cc-bin CXX=bin/${{ matrix.arch.target }}-g++ CXXFLAGS='-O2 -Wall' -f test/Makefile version tests

    - name: Test Toolchain - Run
      if: matrix.arch.target == 'x86_64-linux-musl'
      run: |
        make SRC_DIR=test BIN_DIR=cc-bin CXX=bin/${{ matrix.arch.target }}-g++ CXXFLAGS='-O2 -Wall' PRE_SO_TEST="${{ matrix.arch.target }}/lib/ld-*" -f test/Makefile run-tests
        make SRC_DIR=test BIN_DIR=native-bin CC_DIR=cc-native-bin CXX=g++ CC_CXX=bin/${{ matrix.arch.target }}-g++ CXXFLAGS='-O2 -Wall' -f test/Makefile run-tests
        for i in 76eddge/build-images:cxx-Xenial,/usr/bin/g++ 76eddge/build-images:cxx-Trusty,/usr/bin/g++ 76eddge/build-images:cxx-CentOS6,/usr/bin/g++ 76eddge/build-images:cxx-CentOS6,/opt/rh/devtoolset-7/root/usr/bin/g++ 76eddge/build-images:cxx-Alpine,/usr/bin/g++
        do
          IMAGE=$(echo "$i" | sed -e 's/,.*//')
          CMD="docker run -i --rm -v $(pwd):/build -w /build"
          make SRC_DIR=test BIN_DIR=$(echo "$IMAGE" | sed -e 's/.*://')-$(echo -n "$i" | sha1sum | head -c 8) CC_DIR=cc-bin CXX="$CMD $IMAGE $(echo "$i,g++" | sed -e 's/[^,]*,//' -e 's/,.*//')" CXXFLAGS='-O2 -Wall -Wl,--no-as-needed' PRE_TEST="$CMD --entrypoint='' $IMAGE" PRE_SO_TEST="$CMD $IMAGE" -f test/Makefile run-tests
        done

    - name: Archive Toolchain
      if: github.event_name == 'release'
      run: xz ${{ matrix.arch.target }}.tar

    - name: Upload Toolchain
      if: github.event_name == 'release'
      uses: fnkr/github-action-ghr@v1.3
      env:
        GHR_PATH: ${{ matrix.arch.target }}.tar.xz
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

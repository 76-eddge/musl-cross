--- a/include/sys/random.h
+++ b/include/sys/random.h
@@ -14,6 +14,19 @@
 
 ssize_t getrandom(void *, size_t, unsigned);
 
+#ifndef NO_GLIBC_ABI_COMPATIBLE
+
+#include <sys/syscall.h>
+
+long syscall(long, ...);
+
+__attribute__((__weak__)) ssize_t getrandom(void *buf, size_t buflen, unsigned flags)
+{
+	return syscall(SYS_getrandom, buf, buflen, flags);
+}
+
+#endif
+
 #ifdef __cplusplus
 }
 #endif
--- a/include/sys/stat.h
+++ b/include/sys/stat.h
@@ -74,6 +74,53 @@
 int fstat(int, struct stat *);
 int lstat(const char *__restrict, struct stat *__restrict);
 int fstatat(int, const char *__restrict, struct stat *__restrict, int);
+
+#ifndef NO_GLIBC_ABI_COMPATIBLE
+
+#if _REDIR_TIME64
+#define GLIBC_STAT_FN(X) X ## 64
+#else
+#define GLIBC_STAT_FN(X) X
+#endif
+
+int GLIBC_STAT_FN(__xstat)(int, const char *__restrict, struct stat *__restrict);
+int GLIBC_STAT_FN(__fxstat)(int, int, struct stat *);
+int GLIBC_STAT_FN(__lxstat)(int, const char *__restrict, struct stat *__restrict);
+int GLIBC_STAT_FN(__fxstatat)(int, int, const char *__restrict, struct stat *__restrict, int);
+
+// See glibc xstatver.h
+#if defined(__aarch64__) || (defined(__riscv) && __riscv_xlen == 64)
+#define GLIBC_ABI_XSTAT_VERSION 0
+#elif defined(__x86_64__) || defined(__ia64__) || defined(__powerpc64__) || defined(__s390x__)
+#define GLIBC_ABI_XSTAT_VERSION 1
+#else
+#define GLIBC_ABI_XSTAT_VERSION 3
+#endif
+
+__attribute__((__weak__)) int stat(const char *__restrict path, struct stat *__restrict buf)
+{
+	return GLIBC_STAT_FN(__xstat)(GLIBC_ABI_XSTAT_VERSION, path, buf);
+}
+
+__attribute__((__weak__)) int fstat(int fd, struct stat *buf)
+{
+	return GLIBC_STAT_FN(__fxstat)(GLIBC_ABI_XSTAT_VERSION, fd, buf);
+}
+
+__attribute__((__weak__)) int lstat(const char *__restrict path, struct stat *__restrict buf)
+{
+	return GLIBC_STAT_FN(__lxstat)(GLIBC_ABI_XSTAT_VERSION, path, buf);
+}
+
+__attribute__((__weak__)) int fstatat(int fd, const char *__restrict path, struct stat *__restrict buf, int flag)
+{
+	return GLIBC_STAT_FN(__fxstatat)(GLIBC_ABI_XSTAT_VERSION, fd, path, buf, flag);
+}
+
+#undef GLIBC_STAT_FN
+
+#endif
+
 int chmod(const char *, mode_t);
 int fchmod(int, mode_t);
 int fchmodat(int, const char *, mode_t, int);
@@ -86,6 +133,30 @@
 #if defined(_XOPEN_SOURCE) || defined(_GNU_SOURCE) || defined(_BSD_SOURCE)
 int mknod(const char *, mode_t, dev_t);
 int mknodat(int, const char *, mode_t, dev_t);
+
+#ifndef NO_GLIBC_ABI_COMPATIBLE
+
+int __xmknod(int, const char *, mode_t, dev_t*);
+int __xmknodat(int, int, const char *, mode_t, dev_t*);
+
+// See glibc xstatver.h
+#if defined(__x86_64__) || defined(__alpha__) || defined(__ia64__) || defined(__s390x__)
+#define GLIBC_ABI_XMKNOD_VERSION 0
+#else
+#define GLIBC_ABI_XMKNOD_VERSION 1
+#endif
+
+__attribute__((__weak__)) int mknod(const char *path, mode_t mode, dev_t dev)
+{
+	return __xmknod(GLIBC_ABI_XMKNOD_VERSION, path, mode, &dev);
+}
+
+__attribute__((__weak__)) int mknodat(int fd, const char *path, mode_t mode, dev_t dev)
+{
+	return __xmknodat(GLIBC_ABI_XMKNOD_VERSION, fd, path, mode, &dev);
+}
+
+#endif
 #endif
 
 int futimens(int, const struct timespec [2]);
--- a/include/pthread.h
+++ b/include/pthread.h
@@ -198,6 +198,22 @@
 
 int pthread_atfork(void (*)(void), void (*)(void), void (*)(void));
 
+#ifndef NO_GLIBC_ABI_COMPATIBLE
+
+extern void *__dso_handle __attribute__((__visibility__("hidden")));
+
+__attribute__((__weak__)) int __register_atfork(void (*prepare)(void), void (*parent)(void), void (*child)(void), void *)
+{
+	return pthread_atfork(prepare, parent, child);
+}
+
+__attribute__((__weak__)) int pthread_atfork(void (*prepare)(void), void (*parent)(void), void (*child)(void))
+{
+	return __register_atfork(prepare, parent, child, __dso_handle);
+}
+
+#endif
+
 int pthread_getconcurrency(void);
 int pthread_setconcurrency(int);
 
--- a/include/stdlib.h
+++ b/include/stdlib.h
@@ -50,6 +50,29 @@
 int at_quick_exit (void (*) (void));
 _Noreturn void quick_exit (int);
 
+#ifndef NO_GLIBC_ABI_COMPATIBLE
+
+extern void *__dso_handle __attribute__((__visibility__("hidden")));
+
+int __cxa_atexit(void (*)(void *), void *, void *);
+
+__attribute__((__weak__)) int __cxa_at_quick_exit(void (*func)(void *), void *)
+{
+	return at_quick_exit((void (*)(void))func);
+}
+
+__attribute__((__weak__)) int atexit(void (*func)(void))
+{
+	return __cxa_atexit((void (*)(void *))func, 0, __dso_handle);
+}
+
+__attribute__((__weak__)) int at_quick_exit(void (*func)(void))
+{
+	return __cxa_at_quick_exit((void (*)(void *))func, __dso_handle);
+}
+
+#endif
+
 char *getenv (const char *);
 
 int system (const char *);
--- a/include/string.h
+++ b/include/string.h
@@ -82,8 +82,10 @@
 
 #if defined(_GNU_SOURCE) || defined(_BSD_SOURCE)
 char *strsep(char **, const char *);
+#if defined(NO_GLIBC_ABI_COMPATIBLE)
 size_t strlcat (char *, const char *, size_t);
 size_t strlcpy (char *, const char *, size_t);
+#endif
 void explicit_bzero (void *, size_t);
 #endif
 
--- a/include/unistd.h
+++ b/include/unistd.h
@@ -181,6 +181,44 @@
 int execvpe(const char *, char *const [], char *const []);
 int issetugid(void);
 int getentropy(void *, size_t);
+
+#ifndef NO_GLIBC_ABI_COMPATIBLE
+
+#include <errno.h>
+#include <sys/syscall.h>
+
+int pthread_setcancelstate(int, int *);
+
+__attribute__((__weak__)) int getentropy(void *buffer, size_t len)
+{
+	int cs, ret = 0;
+	char *pos = (char *)buffer;
+
+	if (len > 256) {
+		errno = EIO;
+		return -1;
+	}
+
+	pthread_setcancelstate(1 /* PTHREAD_CANCEL_DISABLE */, &cs);
+
+	while (len) {
+		ret = (int)syscall(SYS_getrandom, pos, len, 0);
+		if (ret < 0) {
+			if (errno == EINTR) continue;
+			else break;
+		}
+		pos += ret;
+		len -= ret;
+		ret = 0;
+	}
+
+	pthread_setcancelstate(cs, 0);
+
+	return ret;
+}
+
+#endif
+
 extern int optreset;
 #endif
 
--- a/src/exit/at_quick_exit.c
+++ b/src/exit/at_quick_exit.c
@@ -31,3 +31,8 @@
 	UNLOCK(lock);
 	return r;
 }
+
+int __cxa_at_quick_exit(void (*func)(void *), void *dso_handle)
+{
+	return at_quick_exit((void (*)(void))func);
+}
--- a/src/thread/pthread_atfork.c
+++ b/src/thread/pthread_atfork.c
@@ -47,3 +47,8 @@
 	UNLOCK(lock);
 	return 0;
 }
+
+int __register_atfork(void (*prepare)(void), void (*parent)(void), void (*child)(void), void *dso_handle)
+{
+	return pthread_atfork(prepare, parent, child);
+}
